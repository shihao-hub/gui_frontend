提问：编写第三方库的时候如何才能在架构层面做到不循环依赖



在编写第三方库时，避免循环依赖是非常重要的，尤其是为了保持代码的可维护性和可测试性。下面是一些架构层面避免循环依赖的策略：
### 1. 模块化设计
- **单一职责原则**：确保每个模块/类只负责一项功能，这样可以减少模块之间的依赖。
- **明确划分模块**：将功能分开到不同的模块中，确保每个模块之间的依赖关系是单向的。
### 2. 接口抽象
- **使用接口或抽象类**：==通过定义接口或抽象类来降低模块之间的耦合==。模块可以依赖于接口而不是具体实现，从而避免直接引用。

  > 注意，举个例子 A => B 代表 B 需要用到 A 的具体实现，直接在 B 中使用 A 是错误的，应该定义一个接口 C，让 A 继承 C，B 中直接使用接口 C 做类型，这样可以不依赖于实现而是依赖接口！
- **依赖倒置原则**：高层模块不应该依赖于低层模块，二者都应该依赖于抽象。
### 3. 依赖注入
- **构造函数注入**：==**将依赖项通过构造函数传入，而不是在类内部创建依赖项**。这样可以在运行时提供依赖，减少模块之间的**静态依赖**。==
- **服务定位器模式**：使用服务定位器来查找依赖项而不是直接依赖于具体实现。
### 4. 事件驱动架构
- **使用事件总线**：使用事件机制来解耦模块，让它们通过发布/订阅模式进行交互，而不是直接调用对方的方法。
- **回调函数**：通过回调函数实现模块间的通讯，避免直接依赖现有模块。
### 5. 明确的依赖方向
- **依赖流向**：==尽量确保模块之间的依赖方向是一致的，例如从高阶到低阶，避免交叉引用。==

  > 举个例子，要求：目录结构中，上一层目录不允许依赖下一层目录的内容（避免交叉引用）
- **重构依赖关系**：定期审查和重构现有的依赖关系，确保没有产生循环依赖。
### 6. 使用工具和静态分析
- **依赖分析工具**：使用依赖图分析工具来识别和可视化模块之间的依赖关系，以便及早发现循环依赖问题。
- **静态代码分析**：采用静态代码分析工具来检测代码中的循环依赖，及时修复。
### 7. 文档与规范
- **文档依赖关系**：为不同模块的依赖关系编写文档，明确说明各个模块间的关系。
- **编码规范**：制定编码规范，指导团队在设计和实现模块时遵循最佳实践，避免产生循环依赖。
通过综合运用上述策略，可以在架构层面有效地减少和避免循环依赖，使得第三方库更加灵活、可维护和可扩展。